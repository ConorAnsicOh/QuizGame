<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- DB연결. 정확한 의미 : Connection Pool생성 , dataSource생성 -->
	<bean	id="dataSource"	class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		<property name="username" value="COMMUNITY"/>
		<property name="password" value="COMMUNITY"/>
	</bean>
	
<!-- MyBatis 설정 (정말 어려움) -->
	<!-- MyBatis가 DB에 접속하도록 허락하는것. -->
	<!-- MyBaits가 DB에 접속할 수 있도록 도와주는 설정. -->
	<bean	id="sqlSessionFactory"	class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:/mybatis/mybatis.xml"/>	
	</bean>
	
<!-- MyBaits가 DB에 Query(SQL)을 실행하고, 결과를 받아오게 도와주는 설정 -->
	<bean	id="sqlSessionTemplate"	class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg	name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

<!-- Transaction(Commit: 반영, Rollback: 원상복구(원복)) 설정. -->
<!-- 처리하는중에 어떤 DB에게 처리할건지 정의하는 것. -->
	<bean	id="transactionManager"	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
<!-- Rollback 규칙 설정 -->
	<tx:advice	id="rollbackRule" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*"	rollback-for="RuntimeException"/>
			<tx:method name="read*"		rollback-for="RuntimeException"/>
			<tx:method name="update*"	rollback-for="RuntimeException"/>
			<tx:method name="delete*"	rollback-for="RUntimeException"/>
		</tx:attributes>
	</tx:advice>

<!-- Transaction 대상 설정 -->
<!-- 관점 지향 언어, 어떤 상황에 대해서 스스로 작동하도록 하는 설정. -->
	<aop:config>
		<aop:pointcut	id="pointCut"	expression="execution(public * com.ktds..service.*ServiceImpl.*(..))"/>
		<aop:advisor advice-ref="rollbackRule" pointcut-ref="pointCut"/>
	</aop:config>

</beans>
